@using Business
@using Entities
<div class="form-group">
    <select class="form-control" @onchange="OnChangeWarehouse">
        <option value="">Seleccione una bodega...</option>
        @foreach (var warehouse in warehouses)
        {
            <option value="@warehouse.WarehouseId">@warehouse.WarehouseName</option>

        }
    </select>
</div>
<hr />
<EditForm Model="InOut">
    <div class="form-group">
        <InputSelect class="form-control" @bind-Value="InOut.StorageId">
            <option value="">Seleccione un producto</option>
            @foreach (var storage in storages)
            {
                <option value="@storage.StorageId">@storage.Product.ProductName</option>

            }
        </InputSelect>
    </div>
    <div class="form-group">
        <label>Cantidad:</label>
        <InputNumber class="form-control" @bind-Value="InOut.InOutQuantity" />
    </div>
    <div class="form-group">
        <label>Es una entrada?</label>
        <InputCheckbox class="form-control" @bind-Value="InOut.IsInput" />
    </div>
    <input type="button" name="btn1" value="@btnValue" @onclick="SaveInOut" class="btn btn-primary" />
    <div class="text-center h4">
        @msg
    </div>
</EditForm>
@code {
    InOutEntity InOut = new InOutEntity();
    List<WarehouseEntity> warehouses = new List<WarehouseEntity>();
    List<StorageEntity> storages = new List<StorageEntity>();
    ProductEntity oProduct = new ProductEntity();
    StorageEntity oStorage = new StorageEntity();
    string msg = "";
    string btnValue => InOut.IsInput ? "Registrar entrada" : "Registrar salida";
    protected override async Task OnInitializedAsync()
    {
        warehouses = B_Warehouse.WarehouseList();
    }
    private void OnChangeWarehouse(ChangeEventArgs e)
    {
        var idWarehouse = e.Value.ToString();
        storages = B_Storage.StorageProductsByWarehouseList(idWarehouse);
    }
    private void SaveInOut()
    {
        oStorage = storages.LastOrDefault(x => x.StorageId == InOut.StorageId);
        oProduct = oStorage.Product;

        if (InOut.IsInput)
        {
            oStorage.PartialQuantity = oStorage.PartialQuantity + InOut.InOutQuantity;
            B_Storage.UpdateStorage(oStorage);

            oProduct.TotalQuantity = oProduct.TotalQuantity + InOut.InOutQuantity;
            P_Product.UpdateProduct(oProduct);
            msg = $"El producto {oProduct.ProductName} ha sido actualizado";
        }
        else
        {
            if (IsBiggerThanZero(InOut.InOutQuantity, oStorage.PartialQuantity))
            {
                oStorage.PartialQuantity = oStorage.PartialQuantity - InOut.InOutQuantity;
                B_Storage.UpdateStorage(oStorage);

                oProduct.TotalQuantity = oProduct.TotalQuantity - InOut.InOutQuantity;
                P_Product.UpdateProduct(oProduct);
                msg = $"El producto {oProduct.ProductName} ha sido actualizado";
            }
            else
            {
                msg = $"No existe la cantidad suficiente en bodega para el producto: {oProduct.ProductName}";
            }
        }
    }

    private bool IsBiggerThanZero(int quantity, int storageQuantity)
    {
        if (storageQuantity > quantity)
        {
            return true;
        }
        return false;

    }


}
